<sub>This challenge is part of a tutorial track by [MyCodeSchool](http://www.youtube.com/mycodeschool)</sub>


Youâ€™re given the pointer to the head node of a linked list. Find whether the list contains any cycle (or loop). A linked list is said to contain cycle if any node is *re-visited* while traversing the list. The head pointer given may be null meaning that the list is empty.

**Input Format**  
You have to complete the <code>int HasCycle(Node* head)</code> method which takes one argument - the head of the linked list. You should NOT read any input from stdin/console. Number of nodes in a linked list doesn't exceed 100.

**Output Format**  
Check whether the linked list has a cycle and <code>return 1</code> if there is a cycle. Otherwise, <code>return 0</code>. Do NOT print anything to stdout/console.



**Sample Input**  

    1 --> NULL
    
    1 --> 2 --> 3
          ^     |
          |     |
           -----                           
    
**Sample Output**

    0
    1
    
**Explanation**  
1. First list has no cycle, hence return 0    
2. Second list is shown to have a cycle, hence return 1. 

**Note**  
After first solving the problem by yourself, see [Floyd's cycle-finding algorithm](http://en.wikipedia.org/wiki/Cycle_detection#Tortoise_and_hare) for an
efficient solution which uses O(N) time and O(1) additional memory.  